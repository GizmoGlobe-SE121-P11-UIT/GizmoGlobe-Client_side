import 'package:cloud_firestore/cloud_firestore.dart';

import '../../functions/helper.dart';

class AIPromptService {
  /// Create base prompt for AI
  String createBasePrompt(bool isVietnamese) {
    return isVietnamese
        ? '''
B·∫°n l√† tr·ª£ l√Ω AI c·ªßa GizmoGlobe, m·ªôt ·ª©ng d·ª•ng di ƒë·ªông b√°n linh ki·ªán m√°y t√≠nh.

TH√îNG TIN V·ªÄ GIZMOGLOBE:
- ·ª®ng d·ª•ng di ƒë·ªông chuy√™n v·ªÅ linh ki·ªán m√°y t√≠nh
- Cam k·∫øt ch·∫•t l∆∞·ª£ng v√† gi√° c·∫£ c·∫°nh tranh
- ƒê·ªôi ng≈© t∆∞ v·∫•n chuy√™n nghi·ªáp
- Ch√≠nh s√°ch b·∫£o h√†nh v√† h·ªó tr·ª£ sau b√°n h√†ng t·ªët
- Nhi·ªÅu ∆∞u ƒë√£i v√† khuy·∫øn m√£i h·∫•p d·∫´n

H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:
1. Tr·∫£ l·ªùi th√¢n thi·ªán v√† chuy√™n nghi·ªáp
2. H∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng trong ·ª©ng d·ª•ng
3. Nh·∫Øc ƒë·∫øn c√°c ∆∞u ƒë√£i trong ·ª©ng d·ª•ng
4. Khuy·∫øn kh√≠ch ng∆∞·ªùi d√πng b·∫≠t th√¥ng b√°o v√† ƒëƒÉng k√Ω t√†i kho·∫£n
5. Tr√°nh nh·∫Øc ƒë·∫øn c√°c n·ªÅn t·∫£ng kh√°c.
'''
        : '''
I am the AI assistant of GizmoGlobe, a mobile app for computer parts.

ABOUT GIZMOGLOBE:
- Mobile app specializing in computer parts
- Committed to quality and competitive pricing
- Professional consulting team
- Excellent warranty and after-sales support
- Attractive promotions and discounts

RESPONSE GUIDELINES:
1. Respond in a friendly and professional manner
2. Guide users on app features
3. Mention in-app promotions
4. Encourage users to enable notifications and register for an account
5. Avoid mentioning other platforms.
''';
  }

  /// Create prompt without products
  String createPromptWithoutProducts(String userMessage, bool isVietnamese) {
    return '${createBasePrompt(isVietnamese)}\n\nCUSTOMER QUESTION: $userMessage\n\n${isVietnamese ? 'Tr·∫£ l·ªùi b·∫±ng Ti·∫øng Vi·ªát:' : 'Reply in English:'}';
  }

  /// Create general prompt
  String createGeneralPrompt(String userMessage, bool isVietnamese) {
    return '${createBasePrompt(isVietnamese)}\n\nCUSTOMER QUESTION: $userMessage\n\n${isVietnamese ? 'Tr·∫£ l·ªùi b·∫±ng Ti·∫øng Vi·ªát:' : 'Reply in English:'}';
  }

  /// Create prompt with products
  String createPromptWithProducts(String userMessage, QuerySnapshot productsSnapshot, bool isVietnamese) {
    final formattedProducts = formatProductsInfo(productsSnapshot.docs, isVietnamese);
    final basePrompt = createBasePrompt(isVietnamese);

    return isVietnamese
        ? '''
$basePrompt

DANH S√ÅCH S·∫¢N PH·∫®M:
$formattedProducts

H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:
1. Ph√¢n t√≠ch y√™u c·∫ßu c·ªßa kh√°ch h√†ng
2. Cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ s·∫£n ph·∫©m
3. ƒê·ªÅ xu·∫•t s·∫£n ph·∫©m ph√π h·ª£p
4. H∆∞·ªõng d·∫´n mua h√†ng trong ·ª©ng d·ª•ng
5. LU√îN ƒë·ªÅ c·∫≠p ƒë·∫øn gi√° v√† t√¨nh tr·∫°ng h√†ng

C√ÇU H·ªéI C·ª¶A KH√ÅCH H√ÄNG: $userMessage

Tr·∫£ l·ªùi b·∫±ng Ti·∫øng Vi·ªát:
'''
        : '''
$basePrompt

PRODUCT LIST:
$formattedProducts

RESPONSE GUIDELINES:
1. Analyze customer request
2. Provide detailed product information
3. Suggest suitable products
4. Guide in-app purchase
5. ALWAYS mention price and stock availability

CUSTOMER QUESTION: $userMessage

Reply in English:
''';
  }

  /// Create voucher prompt
  String createVoucherPrompt(String basePrompt, String formattedVouchers, String userMessage, bool isVietnamese) {
    return isVietnamese
        ? '''
$basePrompt

VOUCHER:
$formattedVouchers

C√ÇU H·ªéI C·ª¶A KH√ÅCH H√ÄNG: $userMessage

Tr·∫£ l·ªùi b·∫±ng Ti·∫øng Vi·ªát:
'''
        : '''
$basePrompt

VOUCHERS:
$formattedVouchers

CUSTOMER QUESTION: $userMessage

Reply in English:
''';
  }

  /// Create user data prompt (favorites, cart, etc.)
  String createUserDataPrompt(String basePrompt, String sectionTitle, String content, String userMessage, bool isVietnamese) {
    return isVietnamese
        ? '''
$basePrompt

$sectionTitle:
$content

C√ÇU H·ªéI C·ª¶A KH√ÅCH H√ÄNG: $userMessage

Tr·∫£ l·ªùi b·∫±ng Ti·∫øng Vi·ªát:
'''
        : '''
$basePrompt

$sectionTitle:
$content

CUSTOMER QUESTION: $userMessage

Reply in English:
''';
  }

  /// Format products information for AI prompts
  String formatProductsInfo(List<QueryDocumentSnapshot> products, bool isVietnamese) {
    final buffer = StringBuffer();
    final Map<String, List<Map<String, dynamic>>> groupedProducts = {};

    for (final doc in products) {
      final data = doc.data() as Map<String, dynamic>;
      final category = data['category']?.toString() ?? 'unknown';
      if (!groupedProducts.containsKey(category)) {
        groupedProducts[category] = [];
      }
      groupedProducts[category]!.add({...data, 'id': doc.id});
    }

    var productCount = 1;
    groupedProducts.forEach((category, productList) {
      buffer.writeln('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
      buffer.writeln(isVietnamese
          ? 'üìÇ [DANH M·ª§C: ${category.toUpperCase()}]'
          : 'üìÇ [CATEGORY: ${category.toUpperCase()}]');
      buffer.writeln('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

      for (final data in productList) {
        final productName = data['productName'] ?? 'Unknown Product';
        buffer.writeln('$productCount. üè∑Ô∏è [PRODUCT_NAME:$productName]');
        buffer.writeln('\n   üí∞ Price: ${formatPriceWithDiscount(data['sellingPrice'], data['discount'])}');

        // Technical specifications by category
        buffer.writeln('\n   üìù Technical Specifications:');
        switch (category) {
          case 'gpu':
            buffer.writeln('      ‚Ä¢ Series: ${data['series']?.toString() ?? 'N/A'}');
            buffer.writeln('      ‚Ä¢ Memory: ${formatValue(data['capacity'], 'capacity')}');
            buffer.writeln('      ‚Ä¢ Bus Width: ${formatValue(data['bus'], 'bus')}');
            buffer.writeln('      ‚Ä¢ Clock Speed: ${formatValue(data['clockSpeed'], 'clock')}');
            break;
          case 'cpu':
            buffer.writeln('      ‚Ä¢ Family: ${data['family']?.toString() ?? 'N/A'}');
            buffer.writeln('      ‚Ä¢ Cores: ${data['core']?.toString() ?? 'N/A'} cores');
            buffer.writeln('      ‚Ä¢ Threads: ${data['thread']?.toString() ?? 'N/A'} threads');
            buffer.writeln('      ‚Ä¢ Clock Speed: ${formatValue(data['clockSpeed'], 'clock')}');
            break;
          case 'ram':
            buffer.writeln('      ‚Ä¢ Type: ${data['ramType']?.toString() ?? 'N/A'}');
            buffer.writeln('      ‚Ä¢ Capacity: ${formatValue(data['capacity'], 'capacity')}');
            buffer.writeln('      ‚Ä¢ Speed: ${formatValue(data['bus'], 'speed')}');
            break;
          case 'psu':
            buffer.writeln('      ‚Ä¢ Wattage: ${data['wattage'] != null ? '${data['wattage']}W' : 'N/A'}');
            buffer.writeln('      ‚Ä¢ Efficiency: ${data['efficiency']?.toString() ?? 'N/A'}');
            buffer.writeln('      ‚Ä¢ Modular: ${formatValue(data['modular'], 'modular')}');
            break;
          case 'drive':
            buffer.writeln('      ‚Ä¢ Type: ${data['type']?.toString() ?? 'N/A'}');
            buffer.writeln('      ‚Ä¢ Capacity: ${formatValue(data['capacity'], 'capacity')}');
            break;
          case 'mainboard':
            buffer.writeln('      ‚Ä¢ Form Factor: ${data['formFactor']?.toString() ?? 'N/A'}');
            buffer.writeln('      ‚Ä¢ Series: ${data['series']?.toString() ?? 'N/A'}');
            buffer.writeln('      ‚Ä¢ Compatibility: ${data['compatibility']?.toString() ?? 'N/A'}');
            break;
        }

        buffer.writeln('\n   üè≠ Manufacturer: ${data['manufacturerID'] ?? 'N/A'}');
        buffer.writeln('   üì¶ ${formatValue(data['stock'], 'stock')}');

        // Add product description if available
        if (data['description'] != null) {
          buffer.writeln('\n   üìÑ Description: ${data['description']}');
        }
        buffer.writeln('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
        productCount++;
      }
    });

    return buffer.toString();
  }

  // Private helper methods
  String formatValue(dynamic value, String type) {
    if (value == null) return 'N/A';

    switch (type) {
      case 'capacity':
        if (value is String) {
          final match = RegExp(r'([a-zA-Z]+)(\d+)').firstMatch(value);
          if (match != null) {
            final unit = match.group(1)!.toUpperCase();
            final number = match.group(2);
            return '$number $unit';
          }
        }
        return value.toString().toUpperCase();
      case 'speed':
        if (value is num) {
          return '${value.toStringAsFixed(0)} MB/s';
        }
        return '${value.toString()} MB/s';
      case 'clock':
        if (value is num) {
          return '${value.toStringAsFixed(1)} GHz';
        }
        if (value is String) {
          final numericValue = double.tryParse(value);
          if (numericValue != null) {
            return '${numericValue.toStringAsFixed(1)} GHz';
          }
        }
        return value.toString();
      case 'price':
        if (value is num) {
          return Helper.toCurrencyFormat(value);
        }
        if (value is String) {
          final match = RegExp(r'\?(\d+\.?\d*)‚Ç´').firstMatch(value);
          if (match != null) {
            return Helper.toCurrencyFormat((match.group(1)!) as num);
          }
        }
        return 'Price not available';
      case 'stock':
        if (value is num) {
          final stock = value as int;
          return stock > 0 ? 'In Stock ($stock units)' : 'Out of Stock';
        }
        return 'Stock status unknown';
      case 'warranty':
        if (value is num) {
          final months = value as int;
          if (months >= 12) {
            final years = months ~/ 12;
            final remainingMonths = months % 12;
            if (remainingMonths == 0) {
              return '$years year${years > 1 ? 's' : ''}';
            }
            return '$years year${years > 1 ? 's' : ''} and $remainingMonths month${remainingMonths > 1 ? 's' : ''}';
          }
          return '$months months';
        }
        return value.toString();
      default:
        return value.toString();
    }
  }

  String formatPriceWithDiscount(dynamic price, dynamic discount) {
    if (price == null) return 'Price not available';
    if (price is! num) return formatValue(price, 'price');

    if (discount == null || discount == 0) {
      return formatValue(price, 'price');
    }

    final discountAmount = price * (discount as num);
    final finalPrice = price - discountAmount;

    return '${formatValue(finalPrice, 'price')} (Original: ${formatValue(price, 'price')})';
  }
}
