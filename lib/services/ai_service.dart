import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:http/http.dart' as http;
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:intl/intl.dart';

class AIService {
  final String _baseUrl =
      'https://generativelanguage.googleapis.com/v1beta/models';
  final String _model = 'gemini-2.0-flash';
  final FirebaseFirestore _firestore;

  // ƒê·ªãnh nghƒ©a c√°c h·∫±ng s·ªë cho category
  static const Map<String, String> CATEGORY_MAPPING = {
    'cpu': 'cpu',
    'gpu': 'gpu',
    'ram': 'ram',
    'psu': 'psu',
    'drive': 'drive',
    'mainboard': 'mainboard'
  };

  // L∆∞u tr·ªØ l·ªãch s·ª≠ c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi
  final Map<String, Map<String, dynamic>> _conversationHistory = {};
  static const Duration _historyExpiration = Duration(days: 1);

  AIService() : _firestore = FirebaseFirestore.instance {
    if (dotenv.env['GEMINI_API_KEY']?.isEmpty ?? true) {
      if (kDebugMode) {
        print('GEMINI_API_KEY is not configured in .env file');
      }
      throw Exception('GEMINI_API_KEY is not configured in .env file');
    }
  }

  // Th√™m ph∆∞∆°ng th·ª©c ƒë·ªÉ x·ª≠ l√Ω ng·ªØ c·∫£nh
  String _processContext(String userMessage, String userId) {
    final now = DateTime.now();
    final history = _conversationHistory[userId];

    // X√≥a l·ªãch s·ª≠ c≈© n·∫øu c√≥
    if (history != null) {
      final lastInteraction = history['timestamp'] as DateTime;
      if (now.difference(lastInteraction) > _historyExpiration) {
        _conversationHistory.remove(userId);
        return userMessage;
      }

      final lastQuestion = history['question'] as String;
      final lastAnswer = history['answer'] as String;
      return '''
Previous question: $lastQuestion
Previous answer: $lastAnswer
Current question: $userMessage
''';
    }

    return userMessage;
  }

  // C·∫≠p nh·∫≠t l·ªãch s·ª≠
  void _updateHistory(String userId, String question, String answer) {
    _conversationHistory[userId] = {
      'question': question,
      'answer': answer,
      'timestamp': DateTime.now(),
    };
  }

  Future<QuerySnapshot> searchProducts(
      {String? category, String? keyword}) async {
    try {
      if (kDebugMode) {
        print(
            'Original search params - category: $category, keyword: $keyword');
      }

      // Chu·∫©n h√≥a keyword n·∫øu c√≥
      if (keyword != null) {
        keyword = _normalizeProductName(keyword);
        if (kDebugMode) {
          print('Normalized keyword: $keyword');
        }
      }

      final CollectionReference<Map<String, dynamic>> productsRef =
          _firestore.collection('products');
      var query = productsRef.where('status', isEqualTo: 'active');

      if (category != null) {
        final standardCategory =
            CATEGORY_MAPPING[category.toLowerCase()] ?? category.toLowerCase();
        if (kDebugMode) {
          print('Searching with standardized category: $standardCategory');
        }
        query = query.where('category', isEqualTo: standardCategory);
      }

      if (keyword != null) {
        // T√°ch t·ª´ kh√≥a th√†nh c√°c ph·∫ßn
        final parts = _extractProductParts(keyword);
        if (kDebugMode) {
          print('Extracted product parts: $parts');
        }

        if (parts.isNotEmpty) {
          // T√¨m ki·∫øm theo t√™n s·∫£n ph·∫©m chu·∫©n h√≥a
          query = query.where('normalizedName', isEqualTo: parts.join(' '));
        } else {
          // Fallback v·ªÅ t√¨m ki·∫øm c∆° b·∫£n n·∫øu kh√¥ng t√°ch ƒë∆∞·ª£c
          final lowerKeyword = keyword.toLowerCase();
          query = query
              .where('productName', isGreaterThanOrEqualTo: lowerKeyword)
              .where('productName', isLessThan: '${lowerKeyword}z');
        }
      }

      final result = await query.get();
      if (kDebugMode) {
        print('Found ${result.docs.length} products');
      }
      return result;
    } catch (e) {
      if (kDebugMode) {
        print('Error in searchProducts: $e');
      }
      rethrow;
    }
  }

  String _normalizeProductName(String input) {
    // Lo·∫°i b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát v√† kho·∫£ng tr·∫Øng th·ª´a
    var normalized = input.replaceAll(RegExp(r'[^\w\s-]'), ' ').trim();

    final patterns = {
      RegExp(r'(?i)intel\s+'): '',
      RegExp(r'(?i)amd\s+'): '',
      RegExp(r'(?i)cpu\s+'): '',
      RegExp(r'(?i)processor\s+'): '',
      RegExp(r'(?i)core\s+'): '',
      RegExp(r'(?i)ryzen\s+'): 'ryzen-'
    };

    patterns.forEach((pattern, replacement) {
      normalized = normalized.replaceAll(pattern, replacement);
    });

    final iSeriesPattern = RegExp(r'(?i)i([3579])\s*-?\s*(\d+)');
    var matches = iSeriesPattern.allMatches(normalized);
    for (var match in matches) {
      var series = match.group(1);
      var number = match.group(2);
      normalized = normalized.replaceAll(match.group(0)!, 'i$series-$number');
    }

    final rSeriesPattern = RegExp(r'(?i)r([3579])\s+(\d+)');
    matches = rSeriesPattern.allMatches(normalized);
    for (var match in matches) {
      var series = match.group(1);
      var number = match.group(2);
      normalized =
          normalized.replaceAll(match.group(0)!, 'ryzen-$series-$number');
    }

    return normalized.trim().toLowerCase();
  }

  List<String> _extractProductParts(String input) {
    final parts = <String>[];

    // T√°ch v√† chu·∫©n h√≥a t·ª´ng ph·∫ßn c·ªßa t√™n s·∫£n ph·∫©m
    final regex = RegExp(r'(?i)(i[3579]|ryzen\s*[3579]|[0-9]+[a-z]*|[a-z]+)');
    final matches = regex.allMatches(input);

    for (var match in matches) {
      var part = match.group(0)!.toLowerCase();

      // Chu·∫©n h√≥a c√°c ph·∫ßn
      if (part.startsWith('i')) {
        parts.add(part); // Gi·ªØ nguy√™n i3/i5/i7/i9
      } else if (part.contains('ryzen')) {
        parts.add('ryzen');
        if (part.contains(RegExp(r'[3579]'))) {
          parts.add(part.replaceAll(RegExp(r'[^3579]'), ''));
        }
      } else if (part.contains(RegExp(r'[0-9]'))) {
        parts.add(part); // Gi·ªØ nguy√™n s·ªë model
      }
    }

    return parts;
  }

  bool _isVietnamese(String text) {
    // Danh s√°ch c√°c k√Ω t·ª± ƒë·∫∑c tr∆∞ng c·ªßa ti·∫øng Vi·ªát
    final vietnameseChars = RegExp(
        r'[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]');
    return vietnameseChars.hasMatch(text.toLowerCase());
  }

  Future<bool> checkFirebaseConnection() async {
    try {
      // Th·ª≠ k·∫øt n·ªëi ƒë·∫øn Firestore
      await _firestore.collection('products').limit(1).get();
      if (kDebugMode) {
        print('Firebase connection successful');
      }
      return true;
    } catch (e) {
      if (kDebugMode) {
        print('Firebase connection failed: $e');
      }
      return false;
    }
  }

  bool _isFavoriteQuestion(String message) {
    final favoriteKeywords = {
      'en': ['favorite', 'favourite', 'like', 'save', 'bookmark', 'wishlist'],
      'vi': ['y√™u th√≠ch', 'th√≠ch', 'l∆∞u', 'ƒë√°nh d·∫•u', 'wishlist']
    };

    final isVietnamese = _isVietnamese(message);
    final keywords = favoriteKeywords[isVietnamese ? 'vi' : 'en']!;
    return keywords.any(
        (keyword) => message.toLowerCase().contains(keyword.toLowerCase()));
  }

  Future<List<Map<String, dynamic>>> _getUserFavorites(String userId) async {
    try {
      final favoriteSnapshot = await _firestore
          .collection('customers')
          .doc(userId)
          .collection('favorites')
          .get();

      final favoriteProductIDs =
          favoriteSnapshot.docs.map((doc) => doc.id).toList();

      if (favoriteProductIDs.isEmpty) {
        return [];
      }

      final productSnapshot = await _firestore
          .collection('products')
          .where(FieldPath.documentId, whereIn: favoriteProductIDs)
          .get();

      return productSnapshot.docs
          .map((doc) => {
                ...doc.data(),
                'productID': doc.id,
              })
          .toList();
    } catch (e) {
      if (kDebugMode) {
        print('Error getting user favorites: $e');
      }
      return [];
    }
  }

  String _formatFavoritesList(
      List<Map<String, dynamic>> favorites, bool isVietnamese) {
    if (favorites.isEmpty) {
      return isVietnamese
          ? 'B·∫°n ch∆∞a c√≥ s·∫£n ph·∫©m y√™u th√≠ch n√†o.'
          : 'You have no favorite products yet.';
    }

    final buffer = StringBuffer();
    buffer.writeln(
        isVietnamese ? 'üìã DANH S√ÅCH Y√äU TH√çCH:' : 'üìã FAVORITE LIST:');
    buffer.writeln('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

    for (var i = 0; i < favorites.length; i++) {
      final product = favorites[i];
      buffer.writeln('\n${i + 1}. ${product['productName']}');
      buffer.writeln(
          '   üí∞ ${_formatPriceWithDiscount(product['sellingPrice'], product['discount'])}');
      buffer.writeln('   üì¶ ${_formatValue(product['stock'], 'stock')}');
      buffer.writeln('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    }

    return buffer.toString();
  }

  bool _isCartQuestion(String message) {
    final cartKeywords = {
      'en': [
        'cart',
        'shopping cart',
        'basket',
        'my cart',
        'what\'s in my cart',
        'show cart',
        'view cart',
        'cart items',
        'items in cart'
      ],
      'vi': [
        'gi·ªè h√†ng',
        'gi·ªè mua h√†ng',
        'gi·ªè c·ªßa t√¥i',
        'xem gi·ªè h√†ng',
        's·∫£n ph·∫©m trong gi·ªè',
        'gi·ªè h√†ng c·ªßa t√¥i',
        'hi·ªÉn th·ªã gi·ªè h√†ng',
        'xem gi·ªè',
        'gi·ªè'
      ]
    };

    final lowerMessage = message.toLowerCase();
    return cartKeywords['en']!
            .any((keyword) => lowerMessage.contains(keyword)) ||
        cartKeywords['vi']!.any((keyword) => lowerMessage.contains(keyword));
  }

  Future<List<Map<String, dynamic>>> _getUserCart(String userId) async {
    try {
      print('Fetching cart for user: $userId');
      final cartSnapshot = await FirebaseFirestore.instance
          .collection('customers')
          .doc(userId)
          .collection('carts')
          .get();

      print('Cart snapshot size: ${cartSnapshot.docs.length}');
      if (cartSnapshot.docs.isEmpty) {
        print('No cart items found');
        return [];
      }

      final cartItems = cartSnapshot.docs.map((doc) {
        final data = doc.data();
        print('Cart item data: $data');
        return {
          'productID': data['productID'],
          'quantity': data['quantity'],
          'docId': doc.id,
        };
      }).toList();

      print('Processing ${cartItems.length} cart items');
      final products = await Future.wait(
        cartItems.map((item) async {
          final productID = item['productID'];
          print('Fetching product details for ID: $productID');

          // Try both collections
          var productDoc = await FirebaseFirestore.instance
              .collection('products')
              .doc(productID)
              .get();

          if (!productDoc.exists) {
            print(
                'Product not found in products collection, trying items collection');
            productDoc = await FirebaseFirestore.instance
                .collection('items')
                .doc(productID)
                .get();
          }

          if (productDoc.exists) {
            final productData = productDoc.data()!;
            print('Found product data: $productData');
            return {
              ...productData,
              'quantity': item['quantity'],
              'cartDocId': item['docId'],
            };
          }
          print('Product not found in any collection: $productID');
          return null;
        }),
      );

      final validProducts = products.whereType<Map<String, dynamic>>().toList();
      print('Returning ${validProducts.length} valid products');
      return validProducts;
    } catch (e) {
      print('Error getting user cart: $e');
      return [];
    }
  }

  String _formatCartList(
      List<Map<String, dynamic>> cartItems, bool isVietnamese) {
    if (cartItems.isEmpty) {
      return isVietnamese
          ? 'Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.'
          : 'Your cart is empty.';
    }

    final buffer = StringBuffer();
    if (isVietnamese) {
      buffer.writeln('Danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng:');
      buffer.writeln('----------------------------------------');
      for (var item in cartItems) {
        final name = item['productName'] ?? 'Unknown Product';
        final price = item['sellingPrice'] ?? 0.0;
        final quantity = item['quantity'] ?? 0;
        final total = price * quantity;
        final stock = item['stock'] ?? 0;
        final stockStatus = stock > 0 ? 'üü¢ C√≤n h√†ng' : 'üî¥ H·∫øt h√†ng';

        buffer.writeln('üì¶ $name');
        buffer.writeln('üí∞ Gi√°: ${_formatPrice(price)}');
        buffer.writeln('üî¢ S·ªë l∆∞·ª£ng: $quantity');
        buffer.writeln('üíµ T·ªïng: ${_formatPrice(total)}');
        buffer.writeln('üìä $stockStatus');
        buffer.writeln('----------------------------------------');
      }
    } else {
      buffer.writeln('Items in your cart:');
      buffer.writeln('----------------------------------------');
      for (var item in cartItems) {
        final name = item['productName'] ?? 'Unknown Product';
        final price = item['sellingPrice'] ?? 0.0;
        final quantity = item['quantity'] ?? 0;
        final total = price * quantity;
        final stock = item['stock'] ?? 0;
        final stockStatus = stock > 0 ? 'üü¢ In Stock' : 'üî¥ Out of Stock';

        buffer.writeln('üì¶ $name');
        buffer.writeln('üí∞ Price: ${_formatPrice(price)}');
        buffer.writeln('üî¢ Quantity: $quantity');
        buffer.writeln('üíµ Total: ${_formatPrice(total)}');
        buffer.writeln('üìä $stockStatus');
        buffer.writeln('----------------------------------------');
      }
    }
    return buffer.toString();
  }

  bool _isInvoiceQuestion(String message) {
    final invoiceKeywords = {
      'en': [
        'invoice',
        'order',
        'purchase',
        'my order',
        'my purchase',
        'order status',
        'invoice status',
        'show invoice',
        'view invoice',
        'check order'
      ],
      'vi': [
        'h√≥a ƒë∆°n',
        'ƒë∆°n h√†ng',
        'mua h√†ng',
        'ƒë∆°n h√†ng c·ªßa t√¥i',
        'mua h√†ng c·ªßa t√¥i',
        'tr·∫°ng th√°i ƒë∆°n h√†ng',
        'tr·∫°ng th√°i h√≥a ƒë∆°n',
        'xem h√≥a ƒë∆°n',
        'ki·ªÉm tra ƒë∆°n h√†ng',
        'ƒë∆°n h√†ng'
      ]
    };

    final lowerMessage = message.toLowerCase();
    return invoiceKeywords['en']!
            .any((keyword) => lowerMessage.contains(keyword)) ||
        invoiceKeywords['vi']!.any((keyword) => lowerMessage.contains(keyword));
  }

  Future<List<Map<String, dynamic>>> _getUserInvoices(String userId) async {
    try {
      print('Fetching invoices for user: $userId');
      final invoiceSnapshot = await FirebaseFirestore.instance
          .collection('sales_invoices')
          .where('customerID', isEqualTo: userId)
          .get();

      print('Invoice snapshot size: ${invoiceSnapshot.docs.length}');
      if (invoiceSnapshot.docs.isEmpty) {
        print('No invoices found');
        return [];
      }

      final invoices = invoiceSnapshot.docs.map((doc) {
        final data = doc.data();
        print('Invoice data: $data');
        return {
          ...data,
          'docId': doc.id,
        };
      }).toList();

      return invoices;
    } catch (e) {
      print('Error getting user invoices: $e');
      return [];
    }
  }

  String _formatInvoiceList(
      List<Map<String, dynamic>> invoices, bool isVietnamese) {
    if (invoices.isEmpty) {
      return isVietnamese
          ? 'B·∫°n ch∆∞a c√≥ h√≥a ƒë∆°n n√†o.'
          : 'You have no invoices.';
    }

    final buffer = StringBuffer();
    if (isVietnamese) {
      buffer.writeln('Danh s√°ch h√≥a ƒë∆°n:');
      buffer.writeln('----------------------------------------');
      for (var invoice in invoices) {
        final date = (invoice['date'] as Timestamp).toDate();
        final formattedDate = DateFormat('dd/MM/yyyy HH:mm').format(date);
        final totalPrice = invoice['totalPrice'] ?? 0.0;
        final paymentStatus = invoice['paymentStatus'] ?? 'unknown';
        final salesStatus = invoice['salesStatus'] ?? 'unknown';

        buffer.writeln('üìÑ M√£ h√≥a ƒë∆°n: ${invoice['salesInvoiceID']}');
        buffer.writeln('üìÖ Ng√†y: $formattedDate');
        buffer.writeln('üí∞ T·ªïng ti·ªÅn: ${_formatPrice(totalPrice)}');
        buffer.writeln(
            'üí≥ Tr·∫°ng th√°i thanh to√°n: ${_formatStatus(paymentStatus, isVietnamese)}');
        buffer.writeln(
            'üì¶ Tr·∫°ng th√°i ƒë∆°n h√†ng: ${_formatStatus(salesStatus, isVietnamese)}');
        buffer.writeln('----------------------------------------');
      }
    } else {
      buffer.writeln('Invoice List:');
      buffer.writeln('----------------------------------------');
      for (var invoice in invoices) {
        final date = (invoice['date'] as Timestamp).toDate();
        final formattedDate = DateFormat('MM/dd/yyyy HH:mm').format(date);
        final totalPrice = invoice['totalPrice'] ?? 0.0;
        final paymentStatus = invoice['paymentStatus'] ?? 'unknown';
        final salesStatus = invoice['salesStatus'] ?? 'unknown';

        buffer.writeln('üìÑ Invoice ID: ${invoice['salesInvoiceID']}');
        buffer.writeln('üìÖ Date: $formattedDate');
        buffer.writeln('üí∞ Total: ${_formatPrice(totalPrice)}');
        buffer.writeln(
            'üí≥ Payment Status: ${_formatStatus(paymentStatus, isVietnamese)}');
        buffer.writeln(
            'üì¶ Order Status: ${_formatStatus(salesStatus, isVietnamese)}');
        buffer.writeln('----------------------------------------');
      }
    }
    return buffer.toString();
  }

  String _formatStatus(String status, bool isVietnamese) {
    final statusMap = {
      'paid': {'en': 'Paid', 'vi': 'ƒê√£ thanh to√°n'},
      'pending': {'en': 'Pending', 'vi': 'ƒêang x·ª≠ l√Ω'},
      'cancelled': {'en': 'Cancelled', 'vi': 'ƒê√£ h·ªßy'},
      'shipped': {'en': 'Shipped', 'vi': 'ƒê√£ giao h√†ng'},
      'delivered': {'en': 'Delivered', 'vi': 'ƒê√£ nh·∫≠n h√†ng'},
      'unknown': {'en': 'Unknown', 'vi': 'Kh√¥ng x√°c ƒë·ªãnh'},
    };

    return statusMap[status]?[isVietnamese ? 'vi' : 'en'] ?? status;
  }

  bool _isVoucherQuestion(String message) {
    final voucherKeywords = {
      'en': [
        'voucher',
        'coupon',
        'discount',
        'promotion',
        'offer',
        'deal',
        'sale',
        'show voucher',
        'list voucher',
        'available voucher'
      ],
      'vi': [
        'voucher',
        'm√£ gi·∫£m gi√°',
        'khuy·∫øn m√£i',
        '∆∞u ƒë√£i',
        'gi·∫£m gi√°',
        'xem voucher',
        'danh s√°ch voucher',
        'voucher c√≥ s·∫µn',
        'm√£ khuy·∫øn m√£i',
        'deal'
      ]
    };

    final lowerMessage = message.toLowerCase();
    return voucherKeywords['en']!
            .any((keyword) => lowerMessage.contains(keyword)) ||
        voucherKeywords['vi']!.any((keyword) => lowerMessage.contains(keyword));
  }

  Future<List<Map<String, dynamic>>> _getVouchers() async {
    try {
      print('Fetching available vouchers');
      final voucherSnapshot = await FirebaseFirestore.instance
          .collection('vouchers')
          .where('isEnabled', isEqualTo: true)
          .where('isVisible', isEqualTo: true)
          .get();

      print('Voucher snapshot size: ${voucherSnapshot.docs.length}');
      if (voucherSnapshot.docs.isEmpty) {
        print('No vouchers found');
        return [];
      }

      final vouchers = voucherSnapshot.docs.map((doc) {
        final data = doc.data();
        print('Voucher data: $data');
        return {
          ...data,
          'docId': doc.id,
        };
      }).toList();

      return vouchers;
    } catch (e) {
      print('Error getting vouchers: $e');
      return [];
    }
  }

  DateTime _parseDate(dynamic dateValue) {
    if (dateValue is Timestamp) {
      return dateValue.toDate();
    } else if (dateValue is String) {
      return DateTime.parse(dateValue);
    }
    return DateTime.now(); // fallback
  }

  String _formatVoucherList(
      List<Map<String, dynamic>> vouchers, bool isVietnamese) {
    if (vouchers.isEmpty) {
      return isVietnamese
          ? 'Hi·ªán kh√¥ng c√≥ voucher n√†o kh·∫£ d·ª•ng.'
          : 'No vouchers available at the moment.';
    }

    final buffer = StringBuffer();
    if (isVietnamese) {
      buffer.writeln('Danh s√°ch voucher kh·∫£ d·ª•ng:');
      buffer.writeln('----------------------------------------');
      for (var voucher in vouchers) {
        final name = voucher['voucherName'] ?? 'Unknown Voucher';
        final discountValue = voucher['discountValue'] ?? 0;
        final isPercentage = voucher['isPercentage'] ?? false;
        final minPurchase = voucher['minimumPurchase'] ?? 0;
        final maxDiscount = voucher['maximumDiscountValue'] ?? 0;
        final description =
            voucher['description'] ?? voucher['viDescription'] ?? '';
        final startTime = _parseDate(voucher['startTime']);
        final endTime = _parseDate(voucher['endTime']);

        buffer.writeln('üéüÔ∏è $name');
        buffer.writeln(
            'üí∞ Gi·∫£m gi√°: ${isPercentage ? '$discountValue%' : _formatPrice(discountValue)}');
        buffer.writeln(
            'üíµ √Åp d·ª•ng cho ƒë∆°n h√†ng t·ª´: ${_formatPrice(minPurchase)}');
        buffer.writeln('üéØ Gi·∫£m t·ªëi ƒëa: ${_formatPrice(maxDiscount)}');
        buffer.writeln(
            'üìÖ Th·ªùi gian: ${DateFormat('dd/MM/yyyy').format(startTime)} - ${DateFormat('dd/MM/yyyy').format(endTime)}');
        buffer.writeln('üìù $description');
        buffer.writeln('----------------------------------------');
      }
    } else {
      buffer.writeln('Available Vouchers:');
      buffer.writeln('----------------------------------------');
      for (var voucher in vouchers) {
        final name = voucher['voucherName'] ?? 'Unknown Voucher';
        final discountValue = voucher['discountValue'] ?? 0;
        final isPercentage = voucher['isPercentage'] ?? false;
        final minPurchase = voucher['minimumPurchase'] ?? 0;
        final maxDiscount = voucher['maximumDiscountValue'] ?? 0;
        final description =
            voucher['description'] ?? voucher['enDescription'] ?? '';
        final startTime = _parseDate(voucher['startTime']);
        final endTime = _parseDate(voucher['endTime']);

        buffer.writeln('üéüÔ∏è $name');
        buffer.writeln(
            'üí∞ Discount: ${isPercentage ? '$discountValue%' : _formatPrice(discountValue)}');
        buffer
            .writeln('üíµ Apply for orders from: ${_formatPrice(minPurchase)}');
        buffer.writeln('üéØ Maximum discount: ${_formatPrice(maxDiscount)}');
        buffer.writeln(
            'üìÖ Valid: ${DateFormat('MM/dd/yyyy').format(startTime)} - ${DateFormat('MM/dd/yyyy').format(endTime)}');
        buffer.writeln('üìù $description');
        buffer.writeln('----------------------------------------');
      }
    }
    return buffer.toString();
  }

  Future<String> generateResponse(String userMessage, {String? userId}) async {
    try {
      final isVietnamese = _isVietnamese(userMessage);
      final isGreeting = _isGreeting(userMessage);
      final isStoreQuestion = _isStoreQuestion(userMessage);
      final isProductQuestion = _isProductQuestion(userMessage);
      final isFavoriteQuestion = _isFavoriteQuestion(userMessage);
      final isCartQuestion = _isCartQuestion(userMessage);
      final isInvoiceQuestion = _isInvoiceQuestion(userMessage);
      final isVoucherQuestion = _isVoucherQuestion(userMessage);

      // X·ª≠ l√Ω ng·ªØ c·∫£nh n·∫øu c√≥ userId
      final processedMessage =
          userId != null ? _processContext(userMessage, userId) : userMessage;

      // N·∫øu l√† c√¢u h·ªèi v·ªÅ voucher
      if (isVoucherQuestion) {
        try {
          final vouchers = await _getVouchers();
          final formattedVouchers = _formatVoucherList(vouchers, isVietnamese);
          final basePrompt = _createBasePrompt(isVietnamese);

          final prompt = isVietnamese
              ? '''
$basePrompt

VOUCHER:
$formattedVouchers

C√ÇU H·ªéI C·ª¶A KH√ÅCH H√ÄNG: $userMessage

Tr·∫£ l·ªùi b·∫±ng Ti·∫øng Vi·ªát:
'''
              : '''
$basePrompt

VOUCHERS:
$formattedVouchers

CUSTOMER QUESTION: $userMessage

Reply in English:
''';

          final response = await _callGeminiAPI(prompt);
          if (userId != null) {
            _updateHistory(userId, userMessage, response);
          }
          return response;
        } catch (e) {
          print('Error handling voucher question: $e');
          return isVietnamese
              ? 'Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.'
              : 'Sorry, an error occurred while processing your request. Please try again later.';
        }
      }

      // N·∫øu l√† c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m y√™u th√≠ch ho·∫∑c gi·ªè h√†ng
      if (isFavoriteQuestion || isCartQuestion) {
        if (userId == null) {
          return isVietnamese
              ? 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem ${isFavoriteQuestion ? "danh s√°ch s·∫£n ph·∫©m y√™u th√≠ch" : "gi·ªè h√†ng"} c·ªßa b·∫°n.'
              : 'Please log in to view your ${isFavoriteQuestion ? "favorite products" : "cart"}.';
        }

        final basePrompt = _createBasePrompt(isVietnamese);
        String content = '';
        String sectionTitle = '';

        if (isFavoriteQuestion) {
          final favorites = await _getUserFavorites(userId);
          content = _formatFavoritesList(favorites, isVietnamese);
          sectionTitle = isVietnamese
              ? 'DANH S√ÅCH S·∫¢N PH·∫®M Y√äU TH√çCH'
              : 'FAVORITE PRODUCTS';
        }

        if (isCartQuestion) {
          final cartItems = await _getUserCart(userId);
          content = _formatCartList(cartItems, isVietnamese);
          sectionTitle = isVietnamese ? 'GI·ªé H√ÄNG' : 'CART CONTENTS';
        }

        final prompt = isVietnamese
            ? '''
$basePrompt

$sectionTitle:
$content

C√ÇU H·ªéI C·ª¶A KH√ÅCH H√ÄNG: $userMessage

Tr·∫£ l·ªùi b·∫±ng Ti·∫øng Vi·ªát:
'''
            : '''
$basePrompt

$sectionTitle:
$content

CUSTOMER QUESTION: $userMessage

Reply in English:
''';

        final response = await _callGeminiAPI(prompt);
        if (userId != null) {
          _updateHistory(userId, userMessage, response);
        }
        return response;
      }

      // N·∫øu l√† c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m, c·∫ßn ki·ªÉm tra k·∫øt n·ªëi Firebase v√† s·∫£n ph·∫©m
      if (isProductQuestion) {
        final isConnected = await checkFirebaseConnection();
        if (!isConnected) {
          return isVietnamese
              ? 'Xin l·ªói, kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.'
              : 'Sorry, unable to connect to the database. Please check your network connection and try again.';
        }

        // T√¨m ki·∫øm s·∫£n ph·∫©m d·ª±a tr√™n ph√¢n t√≠ch c√¢u h·ªèi
        final category = _detectProductCategory(processedMessage);
        final keywords = _extractSearchKeywords(processedMessage);
        if (kDebugMode) {
          print('Detected category: $category');
        }
        if (kDebugMode) {
          print('Extracted keywords: $keywords');
        }

        QuerySnapshot? productsSnapshot;
        if (category != null) {
          productsSnapshot = await searchProducts(category: category);
          if (kDebugMode) {
            print(
                'Found ${productsSnapshot.docs.length} products in category $category');
          }
        } else if (keywords.isNotEmpty) {
          // Th·ª≠ t√¨m v·ªõi t·ª´ kh√≥a ƒë·∫ßu ti√™n
          productsSnapshot = await searchProducts(keyword: keywords.first);
          if (kDebugMode) {
            print(
                'Found ${productsSnapshot.docs.length} products with keyword ${keywords.first}');
          }
        } else {
          // N·∫øu kh√¥ng c√≥ category v√† keyword, t√¨m t·∫•t c·∫£ s·∫£n ph·∫©m available
          productsSnapshot = await searchProducts();
          if (kDebugMode) {
            print(
                'Found ${productsSnapshot.docs.length} total available products');
          }
        }

        if (productsSnapshot.docs.isEmpty) {
          return isVietnamese
              ? 'Xin l·ªói, hi·ªán t·∫°i ch∆∞a c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n. Tuy nhi√™n, ch√∫ng t√¥i s·∫Ω s·ªõm c·∫≠p nh·∫≠t th√™m s·∫£n ph·∫©m m·ªõi. B·∫°n c√≥ th·ªÉ ƒë·ªÉ l·∫°i th√¥ng tin li√™n h·ªá ƒë·ªÉ ƒë∆∞·ª£c th√¥ng b√°o khi c√≥ s·∫£n ph·∫©m m·ªõi.'
              : 'Sorry, there are currently no products matching your requirements. However, we will be updating with new products soon. You can leave your contact information to be notified when new products arrive.';
        }

        final prompt = _createPromptWithProducts(
            processedMessage, productsSnapshot, isVietnamese);
        final response = await _callGeminiAPI(prompt);

        // C·∫≠p nh·∫≠t l·ªãch s·ª≠ n·∫øu c√≥ userId
        if (userId != null) {
          _updateHistory(userId, userMessage, response);
        }

        return response;
      }

      // V·ªõi c√¢u ch√†o ho·∫∑c c√¢u h·ªèi v·ªÅ c·ª≠a h√†ng
      if (isGreeting || isStoreQuestion) {
        final prompt =
            _createPromptWithoutProducts(processedMessage, isVietnamese);
        final response = await _callGeminiAPI(prompt);

        // C·∫≠p nh·∫≠t l·ªãch s·ª≠ n·∫øu c√≥ userId
        if (userId != null) {
          _updateHistory(userId, userMessage, response);
        }

        return response;
      }

      // V·ªõi c√°c c√¢u h·ªèi chung kh√°c
      final prompt = _createGeneralPrompt(processedMessage, isVietnamese);
      final response = await _callGeminiAPI(prompt);

      // C·∫≠p nh·∫≠t l·ªãch s·ª≠ n·∫øu c√≥ userId
      if (userId != null) {
        _updateHistory(userId, userMessage, response);
      }

      return response;
    } catch (e) {
      if (kDebugMode) {
        print('Error in generateResponse: $e');
      }
      return _isVietnamese(userMessage)
          ? 'Xin l·ªói, hi·ªán t·∫°i t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.'
          : 'Sorry, I cannot process your request at the moment. Please try again later.';
    }
  }

  bool _isGreeting(String message) {
    final greetings = {
      'hi',
      'hello',
      'hey',
      'ch√†o',
      'xin ch√†o',
      'alo',
      'good morning',
      'good afternoon',
      'good evening',
      'ch√†o bu·ªïi s√°ng',
      'ch√†o bu·ªïi chi·ªÅu',
      'ch√†o bu·ªïi t·ªëi'
    };

    return greetings.any((greeting) =>
        message.toLowerCase().trim().contains(greeting.toLowerCase()));
  }

  bool _isStoreQuestion(String message) {
    final storeKeywords = {
      'store',
      'shop',
      'business',
      'company',
      'about',
      'contact',
      'warranty',
      'support',
      'service',
      'location',
      'address',
      'c·ª≠a h√†ng',
      'ƒë·ªãa ch·ªâ',
      'li√™n h·ªá',
      'b·∫£o h√†nh',
      'h·ªó tr·ª£',
      'd·ªãch v·ª•',
      'v·ªÅ',
      'gi·ªõi thi·ªáu'
    };

    return storeKeywords.any((keyword) =>
        message.toLowerCase().trim().contains(keyword.toLowerCase()));
  }

  bool _isProductQuestion(String message) {
    final productKeywords = {
      'cpu': ['cpu', 'processor', 'core i', 'ryzen', 'intel', 'amd'],
      'gpu': ['gpu', 'graphics', 'card', 'vga', 'rtx', 'gtx', 'radeon'],
      'ram': ['ram', 'memory', 'ddr', 'dimm', 'kingston', 'corsair'],
      'psu': ['psu', 'power supply', 'ngu·ªìn'],
      'drive': ['ssd', 'hdd', 'nvme', 'storage', '·ªï c·ª©ng', 'samsung'],
      'mainboard': [
        'mainboard',
        'motherboard',
        'bo m·∫°ch',
        'asus',
        'msi',
        'gigabyte'
      ]
    };

    final lowercaseMessage = message.toLowerCase();
    return productKeywords.values.any((keywords) => keywords
        .any((keyword) => lowercaseMessage.contains(keyword.toLowerCase())));
  }

  String _createPromptWithoutProducts(String userMessage, bool isVietnamese) {
    return '${_createBasePrompt(isVietnamese)}\n\nCUSTOMER QUESTION: $userMessage\n\n${isVietnamese ? 'Tr·∫£ l·ªùi b·∫±ng Ti·∫øng Vi·ªát:' : 'Reply in English:'}';
  }

  String _createGeneralPrompt(String userMessage, bool isVietnamese) {
    return '${_createBasePrompt(isVietnamese)}\n\nCUSTOMER QUESTION: $userMessage\n\n${isVietnamese ? 'Tr·∫£ l·ªùi b·∫±ng Ti·∫øng Vi·ªát:' : 'Reply in English:'}';
  }

  Future<String> _callGeminiAPI(String prompt, {int maxRetries = 3}) async {
    final apiKey = dotenv.env['GEMINI_API_KEY'];
    if (apiKey == null || apiKey.isEmpty) {
      throw Exception('GEMINI_API_KEY not found in .env file');
    }

    int retryCount = 0;
    while (retryCount < maxRetries) {
      try {
        print('Calling Gemini API... (Attempt ${retryCount + 1}/$maxRetries)');
        final response = await http.post(
          Uri.parse(
              'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=$apiKey'),
          headers: {'Content-Type': 'application/json'},
          body: jsonEncode({
            'contents': [
              {
                'parts': [
                  {'text': prompt}
                ]
              }
            ],
            'generationConfig': {
              'temperature': 1,
              'topK': 40,
              'topP': 0.95,
              'maxOutputTokens': 1024,
            }
          }),
        );

        print('Gemini API response status: ${response.statusCode}');
        print('Gemini API response body: ${response.body}');

        if (response.statusCode == 200) {
          final responseData = jsonDecode(response.body);
          final candidates = responseData['candidates'] as List;
          if (candidates.isNotEmpty) {
            final content = candidates[0]['content'];
            final parts = content['parts'] as List;
            if (parts.isNotEmpty) {
              return parts[0]['text'] as String;
            }
          }
          throw Exception('No valid response from Gemini API');
        } else if (response.statusCode == 503) {
          retryCount++;
          if (retryCount < maxRetries) {
            print('Model overloaded, retrying in ${retryCount * 2} seconds...');
            await Future.delayed(Duration(seconds: retryCount * 2));
            continue;
          }
        }
        throw Exception(
            'API call failed with status code: ${response.statusCode}, body: ${response.body}');
      } catch (e) {
        print('Error calling Gemini API: $e');
        retryCount++;
        if (retryCount < maxRetries) {
          print('Retrying in ${retryCount * 2} seconds...');
          await Future.delayed(Duration(seconds: retryCount * 2));
          continue;
        }
        rethrow;
      }
    }
    throw Exception(
        'Failed to get response from Gemini API after $maxRetries attempts');
  }

  String _createPromptWithProducts(
      String userMessage, QuerySnapshot productsSnapshot, bool isVietnamese) {
    final formattedProducts =
        _formatProductsInfo(productsSnapshot.docs, isVietnamese);
    final basePrompt = _createBasePrompt(isVietnamese);

    return isVietnamese
        ? '''
$basePrompt

DANH S√ÅCH S·∫¢N PH·∫®M:
$formattedProducts

H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:
1. Ph√¢n t√≠ch y√™u c·∫ßu c·ªßa kh√°ch h√†ng
2. Cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ s·∫£n ph·∫©m
3. ƒê·ªÅ xu·∫•t s·∫£n ph·∫©m ph√π h·ª£p
4. H∆∞·ªõng d·∫´n mua h√†ng trong ·ª©ng d·ª•ng
5. LU√îN ƒë·ªÅ c·∫≠p ƒë·∫øn gi√° v√† t√¨nh tr·∫°ng h√†ng

C√ÇU H·ªéI C·ª¶A KH√ÅCH H√ÄNG: $userMessage

Tr·∫£ l·ªùi b·∫±ng Ti·∫øng Vi·ªát:
'''
        : '''
$basePrompt

PRODUCT LIST:
$formattedProducts

RESPONSE GUIDELINES:
1. Analyze customer request
2. Provide detailed product information
3. Suggest suitable products
4. Guide in-app purchase
5. ALWAYS mention price and stock availability

CUSTOMER QUESTION: $userMessage

Reply in English:
''';
  }

  String _createBasePrompt(bool isVietnamese) {
    return isVietnamese
        ? '''
B·∫°n l√† tr·ª£ l√Ω AI c·ªßa GizmoGlobe, m·ªôt ·ª©ng d·ª•ng di ƒë·ªông b√°n linh ki·ªán m√°y t√≠nh.

TH√îNG TIN V·ªÄ GIZMOGLOBE:
- ·ª®ng d·ª•ng di ƒë·ªông chuy√™n v·ªÅ linh ki·ªán m√°y t√≠nh
- Cam k·∫øt ch·∫•t l∆∞·ª£ng v√† gi√° c·∫£ c·∫°nh tranh
- ƒê·ªôi ng≈© t∆∞ v·∫•n chuy√™n nghi·ªáp
- Ch√≠nh s√°ch b·∫£o h√†nh v√† h·ªó tr·ª£ sau b√°n h√†ng t·ªët
- Nhi·ªÅu ∆∞u ƒë√£i v√† khuy·∫øn m√£i h·∫•p d·∫´n

H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:
1. Tr·∫£ l·ªùi th√¢n thi·ªán v√† chuy√™n nghi·ªáp
2. H∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng trong ·ª©ng d·ª•ng
3. Nh·∫Øc ƒë·∫øn c√°c ∆∞u ƒë√£i trong ·ª©ng d·ª•ng
4. Khuy·∫øn kh√≠ch ng∆∞·ªùi d√πng b·∫≠t th√¥ng b√°o v√† ƒëƒÉng k√Ω t√†i kho·∫£n
5. Tr√°nh nh·∫Øc ƒë·∫øn c√°c n·ªÅn t·∫£ng kh√°c.
'''
        : '''
I am the AI assistant of GizmoGlobe, a mobile app for computer parts.

ABOUT GIZMOGLOBE:
- Mobile app specializing in computer parts
- Committed to quality and competitive pricing
- Professional consulting team
- Excellent warranty and after-sales support
- Attractive promotions and discounts

RESPONSE GUIDELINES:
1. Respond in a friendly and professional manner
2. Guide users on app features
3. Mention in-app promotions
4. Encourage users to enable notifications and register for an account
5. Avoid mentioning other platforms.
''';
  }

  String? _detectProductCategory(String message) {
    final categoryKeywords = {
      'cpu': ['cpu', 'processor', 'core i', 'ryzen', 'intel', 'amd'],
      'gpu': ['gpu', 'graphics', 'rtx', 'gtx', 'radeon', 'vga'],
      'ram': ['ram', 'memory', 'ddr', 'dimm'],
      'psu': ['psu', 'power', 'ngu·ªìn', 'power supply'],
      'drive': ['ssd', 'hdd', 'nvme', 'storage', '·ªï c·ª©ng'],
      'mainboard': ['mainboard', 'motherboard', 'bo m·∫°ch']
    };

    final lowercaseMessage = message.toLowerCase();
    for (var entry in categoryKeywords.entries) {
      if (entry.value
          .any((keyword) => lowercaseMessage.contains(keyword.toLowerCase()))) {
        if (kDebugMode) {
          print(
              'Detected category: ${entry.key} from keywords: ${entry.value}');
        }
        return entry.key;
      }
    }
    return null;
  }

  List<String> _extractSearchKeywords(String message) {
    final stopWords = {
      'what',
      'is',
      'the',
      'price',
      'of',
      'how',
      'much',
      'can',
      'you',
      'tell',
      'me',
      'about',
      't√¥i',
      'mu·ªën',
      't√¨m',
      'gi√°',
      'c·ªßa',
      'cho',
      'bi·∫øt',
      'v·ªÅ'
    };

    return message
        .toLowerCase()
        .split(' ')
        .where((word) => !stopWords.contains(word) && word.length > 2)
        .toList();
  }

  String _formatProductsInfo(
      List<QueryDocumentSnapshot> products, bool isVietnamese) {
    final buffer = StringBuffer();
    final Map<String, List<Map<String, dynamic>>> groupedProducts = {};

    for (final doc in products) {
      final data = doc.data() as Map<String, dynamic>;
      final category = data['category']?.toString() ?? 'unknown';
      if (!groupedProducts.containsKey(category)) {
        groupedProducts[category] = [];
      }
      groupedProducts[category]!.add({...data, 'id': doc.id});
    }

    var productCount = 1;
    groupedProducts.forEach((category, productList) {
      buffer.writeln('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
      buffer.writeln(isVietnamese
          ? 'üìÇ [DANH M·ª§C: ${category.toUpperCase()}]'
          : 'üìÇ [CATEGORY: ${category.toUpperCase()}]');
      buffer.writeln('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

      for (final data in productList) {
        final productName = data['productName'] ?? 'Unknown Product';
        buffer.writeln('$productCount. üè∑Ô∏è [PRODUCT_NAME:$productName]');
        buffer.writeln(
            '\n   üí∞ Price: ${_formatPriceWithDiscount(data['sellingPrice'], data['discount'])}');

        // Th√¥ng s·ªë k·ªπ thu·∫≠t theo category
        buffer.writeln('\n   üìù Technical Specifications:');
        switch (category) {
          case 'gpu':
            buffer.writeln(
                '      ‚Ä¢ Series: ${data['series']?.toString() ?? 'N/A'}');
            buffer.writeln(
                '      ‚Ä¢ Memory: ${_formatValue(data['capacity'], 'capacity')}');
            buffer.writeln(
                '      ‚Ä¢ Bus Width: ${_formatValue(data['bus'], 'bus')}');
            buffer.writeln(
                '      ‚Ä¢ Clock Speed: ${_formatValue(data['clockSpeed'], 'clock')}');
            break;
          case 'cpu':
            buffer.writeln(
                '      ‚Ä¢ Family: ${data['family']?.toString() ?? 'N/A'}');
            buffer.writeln(
                '      ‚Ä¢ Cores: ${data['core']?.toString() ?? 'N/A'} cores');
            buffer.writeln(
                '      ‚Ä¢ Threads: ${data['thread']?.toString() ?? 'N/A'} threads');
            buffer.writeln(
                '      ‚Ä¢ Clock Speed: ${_formatValue(data['clockSpeed'], 'clock')}');
            break;
          case 'ram':
            buffer.writeln(
                '      ‚Ä¢ Type: ${data['ramType']?.toString() ?? 'N/A'}');
            buffer.writeln(
                '      ‚Ä¢ Capacity: ${_formatValue(data['capacity'], 'capacity')}');
            buffer.writeln(
                '      ‚Ä¢ Speed: ${_formatValue(data['bus'], 'speed')}');
            break;
          case 'psu':
            buffer.writeln(
                '      ‚Ä¢ Wattage: ${data['wattage'] != null ? '${data['wattage']}W' : 'N/A'}');
            buffer.writeln(
                '      ‚Ä¢ Efficiency: ${data['efficiency']?.toString() ?? 'N/A'}');
            buffer.writeln(
                '      ‚Ä¢ Modular: ${_formatValue(data['modular'], 'modular')}');
          case 'drive':
            buffer
                .writeln('      ‚Ä¢ Type: ${data['type']?.toString() ?? 'N/A'}');
            buffer.writeln(
                '      ‚Ä¢ Capacity: ${_formatValue(data['capacity'], 'capacity')}');
            break;
          case 'mainboard':
            buffer.writeln(
                '      ‚Ä¢ Form Factor: ${data['formFactor']?.toString() ?? 'N/A'}');
            buffer.writeln(
                '      ‚Ä¢ Series: ${data['series']?.toString() ?? 'N/A'}');
            buffer.writeln(
                '      ‚Ä¢ Compatibility: ${data['compatibility']?.toString() ?? 'N/A'}');
            break;
        }

        buffer.writeln(
            '\n   üè≠ Manufacturer: ${data['manufacturerID'] ?? 'N/A'}');
        buffer.writeln('   üì¶ ${_formatValue(data['stock'], 'stock')}');

        // Th√™m m√¥ t·∫£ s·∫£n ph·∫©m n·∫øu c√≥
        if (data['description'] != null) {
          buffer.writeln('\n   üìÑ Description: ${data['description']}');
        }
        buffer.writeln('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
        productCount++;
      }
    });

    if (products.isNotEmpty && products.length > 1) {
      buffer.writeln('\nüìä [SO S√ÅNH V√Ä ƒê·ªÄ XU·∫§T]\n');

      // Ph√¢n t√≠ch v√† so s√°nh c√°c thu·ªôc t√≠nh ch√≠nh
      final firstProduct = products.first.data() as Map<String, dynamic>;
      if (firstProduct['category'] == 'ram') {
        final rams = products.map((doc) {
          final data = doc.data() as Map<String, dynamic>;
          return {...data, 'id': doc.id};
        }).toList();

        // So s√°nh Type
        buffer.writeln('üîπ Type:');
        for (var i = 0; i < rams.length; i++) {
          final productName = rams[i]['productName'] ?? 'Unknown Product';
          buffer.writeln('${i + 1}. [PRODUCT_NAME:$productName]');
          buffer.writeln(
              '   ‚Ä¢ ${rams[i]['ramType']?.toString().toUpperCase() ?? 'N/A'}');
        }
        buffer.writeln();

        // So s√°nh Capacity
        buffer.writeln('üîπ Capacity:');
        for (var i = 0; i < rams.length; i++) {
          final productName = rams[i]['productName'] ?? 'Unknown Product';
          buffer.writeln('${i + 1}. [PRODUCT_NAME:$productName]');
          buffer
              .writeln('   ‚Ä¢ ${_formatValue(rams[i]['capacity'], 'capacity')}');
        }
        buffer.writeln();

        // So s√°nh Speed
        buffer.writeln('üîπ Speed:');
        for (var i = 0; i < rams.length; i++) {
          final productName = rams[i]['productName'] ?? 'Unknown Product';
          buffer.writeln('${i + 1}. [PRODUCT_NAME:$productName]');
          buffer.writeln('   ‚Ä¢ ${_formatValue(rams[i]['bus'], 'speed')}');
        }
        buffer.writeln();

        // So s√°nh Price
        buffer.writeln('üîπ Price:');
        for (var i = 0; i < rams.length; i++) {
          final productName = rams[i]['productName'] ?? 'Unknown Product';
          buffer.writeln('${i + 1}. [PRODUCT_NAME:$productName]');
          buffer.writeln(
              '   ‚Ä¢ ${_formatPriceWithDiscount(rams[i]['sellingPrice'], rams[i]['discount'])}');
        }
        buffer.writeln();

        // So s√°nh Stock
        buffer.writeln('üîπ Stock:');
        for (var i = 0; i < rams.length; i++) {
          final productName = rams[i]['productName'] ?? 'Unknown Product';
          buffer.writeln('${i + 1}. [PRODUCT_NAME:$productName]');
          buffer.writeln('   ‚Ä¢ ${_formatValue(rams[i]['stock'], 'stock')}');
        }
        buffer.writeln();

        // Th√™m ghi ch√∫ v·ªÅ ƒë·∫∑c ƒëi·ªÉm c·ªßa t·ª´ng s·∫£n ph·∫©m
        buffer.writeln('üìù Notes:');
        for (var i = 0; i < rams.length; i++) {
          final productName = rams[i]['productName'] ?? 'Unknown Product';
          buffer.writeln('${i + 1}. [PRODUCT_NAME:$productName]');
          if (rams[i]['capacity'] == 'gb16') {
            buffer.writeln('   ‚Ä¢ Suitable for basic to mid-range systems.');
          } else if (rams[i]['capacity'] == 'gb32') {
            buffer.writeln(
                '   ‚Ä¢ Good balance of capacity and speed, ideal for gaming and content creation.');
          } else if (rams[i]['capacity'] == 'gb64') {
            buffer.writeln(
                '   ‚Ä¢ Best for demanding tasks like video editing and running virtual machines.');
          } else if (rams[i]['capacity'] == 'gb8') {
            buffer.writeln(
                '   ‚Ä¢ Entry-level option, suitable for basic computing needs.');
          }
        }
        buffer.writeln('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
      }
    }

    return buffer.toString();
  }

  String _formatValue(dynamic value, String type) {
    if (value == null) return 'N/A';

    switch (type) {
      case 'capacity':
        if (value is String) {
          final match = RegExp(r'([a-zA-Z]+)(\d+)').firstMatch(value);
          if (match != null) {
            final unit = match.group(1)!.toUpperCase();
            final number = match.group(2);
            return '$number $unit';
          }
        }
        return value.toString().toUpperCase();
      case 'speed':
        if (value is num) {
          return '${value.toStringAsFixed(0)} MB/s';
        }
        return '${value.toString()} MB/s';
      case 'clock':
        if (value is num) {
          return '${value.toStringAsFixed(1)} GHz';
        }
        if (value is String) {
          final numericValue = double.tryParse(value);
          if (numericValue != null) {
            return '${numericValue.toStringAsFixed(1)} GHz';
          }
        }
        return value.toString();
      case 'price':
        if (value is num) {
          return '\$${value.toStringAsFixed(2)}';
        }
        if (value is String) {
          final match = RegExp(r'\$?(\d+\.?\d*)').firstMatch(value);
          if (match != null) {
            final numericPrice = double.tryParse(match.group(1)!);
            if (numericPrice != null) {
              return numericPrice.toStringAsFixed(2);
            }
          }
        }
        return 'Price not available';
      case 'stock':
        if (value is num) {
          final stock = value as int;
          return stock > 0 ? 'In Stock ($stock units)' : 'Out of Stock';
        }
        return 'Stock status unknown';
      case 'warranty':
        if (value is num) {
          final months = value as int;
          if (months >= 12) {
            final years = months ~/ 12;
            final remainingMonths = months % 12;
            if (remainingMonths == 0) {
              return '$years year${years > 1 ? 's' : ''}';
            }
            return '$years year${years > 1 ? 's' : ''} and $remainingMonths month${remainingMonths > 1 ? 's' : ''}';
          }
          return '$months months';
        }
        return value.toString();
      default:
        return value.toString();
    }
  }

  String _formatPriceWithDiscount(dynamic price, dynamic discount) {
    if (price == null) return 'Price not available';
    if (price is! num) return _formatValue(price, 'price');

    if (discount == null || discount == 0) {
      return _formatValue(price, 'price');
    }

    final discountAmount = price * (discount as num);
    final finalPrice = price - discountAmount;

    return '${_formatValue(finalPrice, 'price')} (Original: ${_formatValue(price, 'price')})';
  }

  String _formatPrice(double price) {
    final formatter = NumberFormat.currency(
      locale: 'en_US',
      symbol: '\$',
      decimalDigits: 2,
    );
    return formatter.format(price);
  }
}
